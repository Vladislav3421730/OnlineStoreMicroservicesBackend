services:

  market:
    image: market:latest
    container_name: market
    depends_on:
      - admin
      - redis
      - postgres
    build:
      context: ./market
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/market
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_BOOT_ADMIN_CLIENT_URL: http://admin:9000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_HOST: kafka:29092
      SERVICE_UPLOAD_URL: http://image:8082/upload/db


  image:
    image: image:latest
    container_name: image
    depends_on:
      - mongodb
      - market
    build:
      context: ./image
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/mongodb
      SPRING_BOOT_ADMIN_CLIENT_URL: http://admin:9000
      SPRING_DATA_MONGODB_DATABASE: image
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_HOST: kafka:29092

  admin:
    image: admin:latest
    container_name: admin
    build:
      context: ./admin
      dockerfile: Dockerfile
    ports:
      - "9000:9000"

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.4
    container_name: zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:6.2.4
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://kafka:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis:/data

  mongodb:
    image: mongo:latest
    container_name: "mongodb"
    volumes:
      - mongodb:/data/db
      - mongodb_config:/data/configdb
    ports:
      - 27017:27017

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: market
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgresdata:/var/lib/postgresql/data

volumes:
  redis:
    driver: local
  postgresdata:
    driver: local
  mongodb:
  mongodb_config: